[project]
name = "patterns"
version = "0.1.0"
description = "Analyze SQL query patterns and recommend table optimizations"
authors = [
    {name = "Eren GUNDAG"}
]
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "pydantic>=2.11.7,<3.0.0",
    "duckdb>=1.3.2,<2.0.0",
    "pyyaml>=6.0.2,<7.0.0",
    "google-cloud-bigquery>=3.34.0,<4.0.0",
    "snowflake-connector-python[secure-local-storage]>=3.16.0,<4.0.0",
    "sqlparse>=0.5.3,<0.6.0",
    "rich>=14.0.0,<15.0.0",
    "keyring>=25.6.0,<26.0.0",
    "pandas>=2.3.1,<3.0.0",
    "sqlglot>=27.0.0,<28.0.0",
    "moz-sql-parser>=4.40.21126,<5.0.0",
    "flask>=3.1.1,<4.0.0",
    "google-genai>=0.8.0,<1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0,<9.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "pytest-cov>=4.1.0,<5.0.0"
]

[tool.poetry]
name = "patterns"
version = "0.1.0"
description = "Analyze SQL query patterns and recommend table optimizations"
authors = ["Eren GUNDAG"]
readme = "README.md"
packages = [
    { include = "api" },
    { include = "patterns" }
]

[tool.poetry.dependencies]
python = "^3.9"
pydantic = "^2.11.7"
duckdb = "^1.3.2"
pyyaml = "^6.0.2"
google-cloud-bigquery = "^3.34.0"
snowflake-connector-python = {extras = ["secure-local-storage"], version = "^3.16.0"}
sqlparse = "^0.5.3"
rich = "^14.0.0"
keyring = "^25.6.0"
pandas = "^2.3.1"
sqlglot = "^27.0.0"
moz-sql-parser = "^4.40.21126"
flask = "^3.1.1"
google-genai = "^0.8.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-mock = "^3.12.0"
pytest-cov = "^4.1.0"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[build-system]
requires = ["poetry-core>=2.0.0"]
build-backend = "poetry.core.masonry.api"